import time
import hmac
import hashlib
import base64
import requests
import pandas as pd
import os
from datetime import datetime
from urllib.parse import urlencode

class NaverKeywordTool:
    def __init__(self, api_key, secret_key, customer_id, debug=False):
        """
        네이버 검색광고 API를 사용한 키워드 도구 초기화
        
        Args:
            api_key (str): 네이버 검색광고 API 엑세스 라이선스
            secret_key (str): 네이버 검색광고 API 비밀키
            customer_id (str): 네이버 검색광고 고객 ID
            debug (bool): 디버그 모드 활성화 여부
        """
        self.api_key = api_key
        self.secret_key = secret_key
        self.customer_id = customer_id
        self.base_url = "https://api.naver.com"
        self.debug = debug
    
    def generate_signature(self, timestamp, method, uri):
        """
        API 요청에 필요한 HMAC 서명 생성
        
        Args:
            timestamp (str): 타임스탬프
            method (str): HTTP 메서드
            uri (str): 요청 URI
            
        Returns:
            str: Base64로 인코딩된 서명
        """
        message = f"{timestamp}.{method}.{uri}"
        signature = hmac.new(
            self.secret_key.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    def get_headers(self, method, uri):
        """
        API 요청에 필요한 헤더 생성
        
        Args:
            method (str): HTTP 메서드
            uri (str): 요청 URI
            
        Returns:
            dict: 요청 헤더
        """
        timestamp = str(int(time.time() * 1000))
        signature = self.generate_signature(timestamp, method, uri)
        
        return {
            'Content-Type': 'application/json; charset=UTF-8',
            'X-Timestamp': timestamp,
            'X-API-KEY': self.api_key,
            'X-Customer': self.customer_id,
            'X-Signature': signature
        }
    
    def get_related_keywords(self, keyword):
        """
        입력한 키워드의 연관 키워드 및 검색량 데이터 가져오기
        
        Args:
            keyword (str): 사용자가 입력한 자연어 키워드
            
        Returns:
            pandas.DataFrame: 연관 키워드 데이터프레임
        """
        uri = "/keywordstool"
        method = "GET"
        
        # 쿼리 파라미터 설정
        params = {
            'hintKeywords': keyword,
            'showDetail': 1
        }
        
        # API 호출
        url = f"{self.base_url}{uri}?{urlencode(params)}"
        headers = self.get_headers(method, uri)
        
        if self.debug:
            print(f"API 요청 URL: {url}")
            print(f"API 요청 헤더: {headers}")
        
        try:
            response = requests.get(url, headers=headers)
            
            if response.status_code != 200:
                print(f"Error: API 호출 실패 (상태 코드: {response.status_code})")
                print(f"응답 내용: {response.text}")
                return None
                
            if self.debug:
                print(f"API 응답 상태 코드: {response.status_code}")
                print(f"API 응답 내용 (일부): {response.text[:200]}...")
                
        except Exception as e:
            print(f"API 호출 중 예외 발생: {e}")
            return None
        
        # 응답 데이터 처리
        try:
            data = response.json()
            keywords_data = data.get('keywordList', [])
            
            if not keywords_data:
                print(f"경고: API에서 키워드 데이터를 반환하지 않았습니다.")
                return None
            
            # 데이터프레임으로 변환
            df = pd.DataFrame(keywords_data)
            
            # 데이터 타입 변환 - 숫자 열을 적절한 타입으로 변환
            numeric_columns = [
                'monthlyPcQcCnt', 'monthlyMobileQcCnt', 
                'monthlyAvePcClkCnt', 'monthlyAveMobileClkCnt', 
                'monthlyAvePcCtr', 'monthlyAveMobileCtr',
                'plAvgDepth', 'compIdx'
            ]
            
            for col in numeric_columns:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                    df[col] = df[col].fillna(0)
            
            # 전체 검색량 계산 (PC + 모바일)
            if 'monthlyPcQcCnt' in df.columns and 'monthlyMobileQcCnt' in df.columns:
                df['totalSearchVolume'] = df['monthlyPcQcCnt'] + df['monthlyMobileQcCnt']
            
            # 검색량 기준으로 내림차순 정렬
            if 'totalSearchVolume' in df.columns:
                df = df.sort_values(by='totalSearchVolume', ascending=False)
            elif 'monthlyPcQcCnt' in df.columns:
                df = df.sort_values(by='monthlyPcQcCnt', ascending=False)
            
            # 순위 열 추가
            df['rank'] = range(1, len(df) + 1)
            
            # 중요 열 순서 재배치
            important_columns = ['rank', 'relKeyword']
            if 'totalSearchVolume' in df.columns:
                important_columns.append('totalSearchVolume')
            if 'monthlyPcQcCnt' in df.columns:
                important_columns.append('monthlyPcQcCnt')
            if 'monthlyMobileQcCnt' in df.columns:
                important_columns.append('monthlyMobileQcCnt')
            
            # 나머지 열 추가
            for col in df.columns:
                if col not in important_columns:
                    important_columns.append(col)
            
            # 열 순서 재배치
            df = df[important_columns]
            
            return df
            
        except Exception as e:
            print(f"데이터 처리 중 오류 발생: {e}")
            if self.debug:
                import traceback
                traceback.print_exc()
            return None
    
    def save_to_excel(self, df, keyword, path=None):
        """
        데이터프레임을 엑셀 파일로 저장
        
        Args:
            df (pandas.DataFrame): 저장할 데이터프레임
            keyword (str): 검색 키워드 (파일명에 사용)
            path (str, optional): 저장 경로
            
        Returns:
            str: 저장된 파일의 전체 경로
        """
        if df is None or df.empty:
            print("저장할 데이터가 없습니다.")
            return None
        
        # 현재 날짜와 시간을 파일명에 포함
        now = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{keyword}_연관키워드_{now}.xlsx"
        
        # 경로가 제공된 경우 디렉토리 생성
        if path:
            os.makedirs(path, exist_ok=True)
            full_path = os.path.join(path, filename)
        else:
            full_path = filename
        
        # 엑셀 파일로 저장
        df.to_excel(full_path, index=False)
        print(f"데이터가 '{full_path}'에 저장되었습니다.")
        
        return full_path


def run_keyword_tool():
    """
    키워드 도구 실행 함수
    """
    print("=" * 50)
    print("네이버 검색광고 API 연관 키워드 추출 도구")
    print("=" * 50)
    
    # API 인증 정보 - 고정값 사용
    API_KEY = "01000000007b70b51bf10e3ddd6448533dc02cc517b75b9cc778cbf02bc9a3d384026a1073"  # 네이버 검색광고 API 엑세스 라이선스
    SECRET_KEY = "AQAAAAB7cLUb8Q493WRIUz3ALMUXOz1JB1YlXR9SWgWUJhxi4g=="  # 네이버 검색광고 API 비밀키
    CUSTOMER_ID = "3413173"  # 네이버 검색광고 고객 ID
    
    # 저장 경로
    default_path = os.path.dirname(os.path.abspath(__file__))
    save_path = input(f"데이터를 저장할 경로를 입력하세요 (기본값: {default_path}): ")
    
    if not save_path:
        save_path = default_path
    
    # 키워드 도구 초기화
    tool = NaverKeywordTool(API_KEY, SECRET_KEY, CUSTOMER_ID, debug=True)
    
    while True:
        print("\n" + "-" * 50)
        print("연관 키워드를 검색하려면 키워드를 입력하세요. 종료하려면 'q'를 입력하세요.")
        keyword = input("키워드 입력: ")
        
        if keyword.lower() == 'q':
            print("프로그램을 종료합니다.")
            break
        
        print(f"'{keyword}'의 연관 키워드를 검색 중입니다...")
        try:
            # 연관 키워드 가져오기
            result_df = tool.get_related_keywords(keyword)
            
            if result_df is not None and not result_df.empty:
                # 결과 출력
                print(f"\n총 {len(result_df)}개의 연관 키워드를 찾았습니다.")
                print("\n상위 10개 키워드:")
                print(result_df[['rank', 'relKeyword', 'totalSearchVolume']].head(10))
                
                # 엑셀 파일로 저장
                tool.save_to_excel(result_df, keyword, save_path)
            else:
                print(f"'{keyword}'에 대한 연관 키워드를 찾을 수 없습니다.")
                
        except Exception as e:
            print(f"오류 발생: {e}")
            if tool.debug:
                import traceback
                traceback.print_exc()


if __name__ == "__main__":
    try:
        run_keyword_tool()
    except KeyboardInterrupt:
        print("\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as e:
        print(f"프로그램 실행 중 오류 발생: {e}")
        import traceback
        traceback.print_exc()
